/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "bme280/bme280.h"
#include <string.h>
#include "st7735/st7735.h"
#include "st7735/fonts.h"
#include "st7735/icon.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c3;

SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
double s1OffSetPress = 0.0;
double s1OffSetTemp = 0.0;
double s1OffSetHum = 0.0;
struct bme280_dev dev1;
struct bme280_dev dev2;
double s1PresBuffer[10];
double s2PresBuffer[10];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C3_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
int8_t bme280_user_init(void);
void print_sensor_data(struct bme280_data *comp_data1,struct bme280_data *comp_data2);
int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev1,struct bme280_dev *dev2);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C3_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */

    ST7735_Init();
    ST7735_FillScreen(ST7735_BLACK);
    ST7735_DrawImage(10, 10, 80, 80, (uint16_t*)logo);
    HAL_Delay(100);
    HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(SDO2_GPIO_Port, SDO2_Pin, GPIO_PIN_SET);
    HAL_Delay(500);

   if(bme280_user_init()==BME280_OK){
	   printf("OK : Sensor Init\n");
	   stream_sensor_data_forced_mode(&dev1,&dev2);
   }


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.Timing = 0x10909CEC;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_LED_GPIO_Port, TFT_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDO2_GPIO_Port, SDO2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RES_GPIO_Port, TFT_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : TFT_LED_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_LED_Pin|TFT_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : SDO2_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = SDO2_Pin|TFT_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : TFT_RES_Pin */
  GPIO_InitStruct.Pin = TFT_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(TFT_RES_GPIO_Port, &GPIO_InitStruct);

  /**/
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB6);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, uint8_t intf_ptr){
	if(HAL_I2C_Mem_Read(&hi2c3, intf_ptr, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 5000)==HAL_OK){
		return BME280_OK;
	}else{
		return BME280_E_COMM_FAIL;
	}
}

int8_t user_i2c_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, uint8_t intf_ptr){
	if(HAL_I2C_Mem_Write(&hi2c3, intf_ptr, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, 5000)==HAL_OK){
		return BME280_OK;
	}else{
		return BME280_E_COMM_FAIL;
	}
}

void user_delay_ms(uint32_t period, uint8_t intf_ptr){
	HAL_Delay(period);
}


int8_t bme280_user_init(void){
	int8_t rslt = BME280_OK;
	uint8_t dev1_addr = BME280_I2C_ADDR_PRIM;
	uint8_t dev2_addr = BME280_I2C_ADDR_SEC;

	dev1.intf_ptr = dev1_addr;
	dev1.intf = BME280_I2C_INTF;
	dev1.read = user_i2c_read;
	dev1.write = user_i2c_write;
	dev1.delay_ms = user_delay_ms;

	dev2.intf_ptr = dev2_addr;
	dev2.intf = BME280_I2C_INTF;
	dev2.read = user_i2c_read;
	dev2.write = user_i2c_write;
	dev2.delay_ms = user_delay_ms;


	rslt = bme280_init(&dev1);
	rslt = bme280_init(&dev2);
	return rslt;
}


int8_t stream_sensor_data_forced_mode(struct bme280_dev *_dev1,struct bme280_dev *_dev2)
{
    int8_t rslt;
    uint8_t settings_sel;
	uint32_t req_delay1,req_delay2;
    struct bme280_data comp_data1,comp_data2;

    /* Recommended mode of operation: Indoor navigation */
    _dev1->settings.osr_h = BME280_OVERSAMPLING_16X;
    _dev1->settings.osr_p = BME280_OVERSAMPLING_16X;
    _dev1->settings.osr_t = BME280_OVERSAMPLING_16X;
    _dev1->settings.filter = BME280_FILTER_COEFF_16;

    _dev2->settings.osr_h = BME280_OVERSAMPLING_16X;
    _dev2->settings.osr_p = BME280_OVERSAMPLING_16X;
    _dev2->settings.osr_t = BME280_OVERSAMPLING_16X;
    _dev2->settings.filter = BME280_FILTER_COEFF_16;

    settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;

    rslt = bme280_set_sensor_settings(settings_sel, _dev1);
    rslt = bme280_set_sensor_settings(settings_sel, _dev2);

	/*Calculate the minimum delay required between consecutive measurement based upon the sensor enabled
     *  and the oversampling configuration. */
    req_delay1 = bme280_cal_meas_delay(&_dev1->settings);
    req_delay2 = bme280_cal_meas_delay(&_dev2->settings);

    printf("Temperature, Pressure, Humidity\r\n");
    /* Continuously stream sensor data */

    //init offset
    for(int i = 0 ; i < 10; i ++){
		rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, _dev1);
		_dev1->delay_ms(req_delay1, _dev1->intf_ptr);
		rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, _dev2);
	    _dev2->delay_ms(req_delay2, _dev2->intf_ptr);
	    rslt = bme280_get_sensor_data(BME280_ALL, &comp_data1, _dev1);
	    rslt = bme280_get_sensor_data(BME280_ALL, &comp_data2, _dev2);
	    s1PresBuffer[i] = comp_data1.pressure;
	    s2PresBuffer[i] = comp_data2.pressure;
    }

    s1OffSetPress = comp_data1.pressure-comp_data2.pressure;
    s1OffSetTemp = comp_data1.temperature-comp_data2.temperature;
    s1OffSetHum = comp_data1.humidity-comp_data2.humidity;
    ST7735_FillScreen(ST7735_BLACK);
	ST7735_DrawImage(10, 12, 24, 24, (uint16_t*)ther);
	ST7735_DrawImage(10, 45, 24, 24, (uint16_t*)humdity);
	ST7735_DrawImage(55, 85, 24, 24, (uint16_t*)meter);
    while (1) {
        rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, _dev1);
        _dev1->delay_ms(req_delay1, _dev1->intf_ptr);
        rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, _dev2);
        _dev2->delay_ms(req_delay2, _dev2->intf_ptr);
        /* Wait for the measurement to complete and print data @25Hz */

        rslt = bme280_get_sensor_data(BME280_ALL, &comp_data1, _dev1);
        rslt = bme280_get_sensor_data(BME280_ALL, &comp_data2, _dev2);
        comp_data1.pressure -=  s1OffSetPress;
        comp_data1.temperature -= s1OffSetTemp;
        comp_data1.humidity -= s1OffSetHum;
        print_sensor_data(&comp_data1,&comp_data2);
    }
    return rslt;
}

void print_sensor_data(struct bme280_data *comp_data1,struct bme280_data *comp_data2)
{
#ifdef BME280_FLOAT_ENABLE
	    char txtTemp[10];
	    char txtHum[10];
	    char txtPress[12];
	    double pres1 ;
	    double pres2 ;
	    double sum1 = 0.0;
	    double sum2 = 0.0;

	    for(int i = 0 ; i < 9 ;i ++){
			 s1PresBuffer[i] = s1PresBuffer[i+1];
			 sum1+= s1PresBuffer[i];
			 s2PresBuffer[i] = s2PresBuffer[i+1];
			 sum2+= s2PresBuffer[i];
	    }

	    s1PresBuffer[9] = comp_data1->pressure;
	    sum1+=s1PresBuffer[9];
	    s2PresBuffer[9] = comp_data2->pressure;
	    sum2+=s2PresBuffer[9];

	    pres1 = sum1/10.0;
	    pres2 = sum2/10.0;

	    sprintf(txtTemp,"%.1f/%.1f C",comp_data1->temperature,comp_data2->temperature);
	    sprintf(txtHum,"%.1f/%.1f %%",comp_data1->humidity,comp_data2->humidity);
	    sprintf(txtPress,"%07.1f",(pres1-pres2));
	    ST7735_WriteString(40, 18, txtTemp, Font_7x10, 0x17E6, ST7735_BLACK);
	    ST7735_WriteString(40, 50, txtHum, Font_7x10, 0x145C, ST7735_BLACK);
	    ST7735_WriteString(8, 120, txtPress, Font_16x26, ST7735_CYAN, ST7735_BLACK);
        printf("S1 : %0.2f, %0.2f, %0.2f\r\n",comp_data1->temperature, pres1, comp_data1->humidity);
        printf("S2 : %0.2f, %0.2f, %0.2f\r\n",comp_data2->temperature, pres2, comp_data2->humidity);

#else
        printf("%ld, %ld, %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
#endif
}


//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
//	if(GPIO_Pin==GPIO_PIN_13){
//		b1Isr = 1;
//	}
//}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
